default:
    namespace: Sfynx\AuthBundle
    cqrs: Role\Query
    template: default
    indentation: 4
    widgets:
        presentation:
            widget_coordination:
                class: GetOneCoordination
                arguments:
                    - '$workflowHandler'
                extends: ~
                options:
                    implements: ~
                    uses:
                      - 'Symfony\Component\HttpFoundation\JsonResponse'
                      - 'Exception'
                      - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\Entity\ViolationEntityException'
                      - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\Entity\NotFoundEntityException'
                    traits:
                      - 'Sfynx\CoreBundle\Layers\Presentation\Coordination\Generalisation\Traits\TraitParam'
                      - 'Sfynx\CoreBundle\Layers\Presentation\Coordination\Generalisation\Traits\TraitMessage'
                body:
                    - codeComment1:
                        design: 'code'
                        content:
                          - 'try {'
                          - '// 1. Transform options to Query.'
                    - getQuery:
                        design: 'adapter'
                        class: Sfynx\CoreBundle\Layers\Presentation\Adapter\Query\QueryAdapter
                        arguments:
                            - 'new GetOneQuery'
                        calls:
                            - [ createQueryFromRequest, [ 'new QueryRequest', 'false'] ]
                    - codeComment2:
                        design: 'code'
                        content: "// 2. Implement the command workflow"
                    - queryWorkflow:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Query\Workflow\QueryWorkflow
                        calls:
                            - [ attach, [ 'new OBApiHandler' ] ]
                    - codeComment3:
                        design: 'code'
                        content: "// 3. Implement decorator to apply the command workflow from the query"
                    - queryHandlerResult:
                        design: 'decorator'
                        class: Sfynx\CoreBundle\Layers\Application\Query\Handler\ApiQueryHandler
                        arguments:
                            - '$queryworkflow'
                        handlers: [ 'GetQueryValidationHandler', 'GetQuerySpecHandler']
                        calls:
                            - [ process, [ '$getQuery' ] ]
                    - codeln1:
                        design: 'code'
                        content:
                          - "// 4. Implement the Response workflow"
                    - workflowHandler:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Common\Handler\WorkflowHandler
                        calls:
                            - [ attach, [ 'new OBRoleApiJson' ] ]
                            - [ attach, [ 'new OBCreateResponseJson' ] ]
                            - [ attach, [ 'new OBCreatedStatusResponseJson' ] ]
                    - responseHandlerResult:
                        design: 'handler'
                        class: Sfynx\CoreBundle\Layers\Application\Response\Handler\ResponseHandler
                        arguments:
                            - '$Workflowhandler'
                        calls:
                            - [ process, [ '$queryHandlerResult' ] ]
                    - codeln2:
                        design: 'code'
                        content:
                          - "$response = $responseHandlerResult->getResponse();"
                          - '}  catch (NotFoundEntityException $e) {'
                          - '    $response = new JsonResponse();'
                          - '    $response->setStatusCode(JsonResponse::HTTP_NOT_FOUND);'
                          - '    $response->setContent(TraitMessage::jsonError($e->getMessage()));'
                          - '}  catch (ViolationEntityException $e) {'
                          - '    $response = new JsonResponse();'
                          - '    $response->setStatusCode(JsonResponse::HTTP_CONFLICT);'
                          - '    $response->setContent(TraitMessage::jsonError($e->getMessage()));'
                          - '}  catch (Exception $e) {'
                          - '    $response = new JsonResponse();'
                          - '    $response->setStatusCode(JsonResponse::HTTP_SERVICE_UNAVAILABLE);'
                          - '    $response->setContent(TraitMessage::jsonError($e->getMessage()));'
                          - '}'
                          - ''
                          - 'return $response;'
            widget_request:
                class: QueryRequest
                arguments:
                  - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                options:
                    methods: ['GET']
        application:
            widget_cqrs_query:
                - GetOneQuery:
                    create: true
                    class: GetOneQuery
                    options:
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Application\Common\Generalisation\Traits\TraitCreateInstanceFromNative'
#                        models:
#                          0:
#                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\CommandQueryObject'
#                            parameters:
#                              performMethods:
#                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
#                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
#                              # createFromNativeType = ['general_arg', 'specific_arg']
#                              createFromNativeType: 'general_arg'
            widget_cqrs_query_validator_specification:
                class: Validation\SpecHandler\GetQuerySpecHandler
                arguments:
                  - '$queryHandlerResult'
            widget_cqrs_query_validator_validation:
                class: Validation\ValidationHandler\GetQueryValidationHandler
                arguments:
                  - '$queryHandlerResult'
                  - 'new SymfonyValidatorStrategy'
                  - 'false'
            widget_service_app_class:
                - SymfonyValidatorStrategy:
                    create: false
                    class: 'Sfynx\CoreBundle\Layers\Application\Validation\Validator\SymfonyValidatorStrategy'
                    arguments: ['Symfony\Component\Validator\Validator\ValidatorInterface']
        domain:
            #
            # ENTITY CLASSES
            #
            widget_entity_class:
                - RoleEntity:
                    create: true
                    class: Domain\Entity\Role
                    options:
                        mapping: 'Role'
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitBuild'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitEnabled'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitName'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitDatetime'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitHeritage'
                          - 'Sfynx\AuthBundle\Domain\Generalisation\TraitAccessControl'
                        models:
#                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity', parameters: { performMethod: ['Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct']} }
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity'
                            parameters:
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToString'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Serialize'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Unserialize'
            #
            # MANAGER CLASSES
            #
            widget_service_manager_class:
                - RoleEntityManager:
                    create: true
                    class: Entity\Role\Manager\RoleManager
                    arguments: ~
                    options:
                        entity: 'Role'
            #
            # SERVICES CLASSES
            #
            widget_service_class:
                #
                # ROLE REPOSITORY INTERFACES
                #
                - RoleCommandRepositoryInterface:
                    create: true
                    class: Domain\Repository\Command\RoleCommandRepositoryInterface
                    type: interface
                - RoleQueryRepositoryInterface:
                    create: true
                    class: Domain\Repository\Query\RoleQueryRepositoryInterface
                    type: interface
                #
                # ROLE JSON API
                #
                - RoleBookJsonApi:
                    create: true
                    class: Domain\Workflow\Observer\Role\Response\JsonApiBook\RoleBookJsonApi
                    arguments: ~
                    options:
                        implements: ~
                        uses: ~
                        traits: ~
                        methods:
                          - name: 'transform'
                            comments: ['{@inheritdoc}']
                            arguments: ['Domain\Workflow\Observer\Role\Response\JsonApiBook\RoleBookJsonApi']
                            visibility: 'public'
                            returnType: 'void'
                            body:
                              - 'return [];'
                - RoleBookJsonApiTransformer:
                    create: true
                    class: Domain\Workflow\Observer\Role\Response\JsonApiTransformer\RoleBookJsonApiTransformer
                    arguments: ~
                    extends: 'League\Fractal\TransformerAbstract'
                    options:
                        implements: ~
                        uses: ~
                        traits: ~
                        methods:
                          - name: 'transform'
                            comments: ~
                            arguments: ['Sfynx\AuthBundle\Domain\Workflow\Observer\Role\Response\JsonApiBook\RoleBookJsonApi']
                            visibility: 'public'
                            returnType: 'void'
                            body:
                              - 'return [];'
            #
            # OBSERVER CLASSES
            #
            widget_workflow_observer_class:
                #
                # LOGICAL RESPONSE HANDLER
                #
                - OBApiHandler:
                    create: true
                    class: Domain\Workflow\Observer\Role\Query\Api\OBApiHandler
                    arguments:
                      - 'Psr\Log\LoggerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Manager\Generalisation\Interfaces\ManagerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Query\Api\AbstractApiQueryHandler
                    options:
                        implements: ~
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        traits: ~
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - 'try {'
                              - "    $this->wfLastData->books = $this->manager->getQueryRepository('FindGetQueryTransformer', []);"
                              - '} catch (Exception $e) {'
                              - '    throw WorkflowException::noCreatedViewForm();'
                              - '}'
                              - 'return true;'
                - OBRoleApiJson:
                    create: true
                    class: Domain\Workflow\Observer\Role\Response\Api\OBRoleApiJson
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'RoleBookJsonApiTransformer'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\Api\AbstractApiJson
                    options:
                        implements: ~
                        uses:
                          - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\EntityException'
                          - 'Exception'
                          - 'Spatie\Fractalistic\Fractal'
                        traits: ~
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - 'try {'
                              - "    $this->wfLastData->rows = Fractal::create()"
                              - "               ->collection($this->wfHandler->books, new RoleBookJsonApiTransformer())"
                              - "               ->serializeWith(new JsonApiSerializer())"
                              - "               ->paginateWith(new IlluminatePaginatorAdapter($paginator))"
                              - "               ->toArray();"
                              - "               "
                              - '} catch (Exception $e) {'
                              - '    throw EntityException::NotFoundEntity("Domain\Entity\Role");'
                              - '}'
                              - ''
                              - 'return true;'
                - OBCreateResponseJson:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBCreateResponseJson
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                - OBCreatedStatusResponseJson:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\Api\OBCreatedStatusResponseJson
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
        infrastructure:
            widget_security_parse: true
            widget_infra_class:
                #
                # ROLE REPOSITORIES
                #
                - CommandRoleRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Command\Orm\RoleRepository
                    arguments: ~
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractCommandRepository
                    options:
                        implements: ['Domain\Repository\Command\RoleCommandRepositoryInterface']
                        uses: ~
                        traits: ~
                - QueryRoleRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\RoleRepository
                    arguments: ~
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractQueryRepository
                    options:
                        implements: ['Domain\Repository\Query\RoleQueryRepositoryInterface']
                        uses: ~
                        traits: ~
                #
                # RESSOURCE TRANSFORMER/QUERY BUILDER
                #
                - FindGetQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Role\QueryBuilder\FindGetQueryBuilder
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindGetQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Role\QueryTransformer\FindGetQueryTransformer
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Sfynx\AuthBundle\Infrastructure\Persistence\Adapter\Query\Orm\Role\QueryBuilder\FindGetQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindGetQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}

    mapping:
        x-providers: [orm, couchdb]
        x-entities:
          Role:
            x-fields:
              id:
                name: entityId
                type: valueObject
                voName: IdVO
                primaryKey: true
                mapping:
                  targetEntity: 'Sfynx\AuthBundle\Domain\Entity\Role'
              layout:
                type: valueObject
                name: layout
                voName: IdVO
                foreignKey: true
                required: true
                choice_label: Layout
                mapping:
                  relationship: ManyToOne
                  targetEntity: 'Sfynx\AuthBundle\Domain\Entity\Layout'
                  setter: true
              accessControl:
                type: valueObject
                name: accessControl
                voName: IdVO
                foreignKey: true
                required: true
                choice_label: Ressource
                mapping:
                  relationship: ManyToOne
                  targetEntity: 'Sfynx\AuthBundle\Domain\Entity\Ressource'
              role:
                type: valueObject
                voName: RoleVO
        x-valueObjects:
          IdVO:
            type: 'Sfynx\CoreBundle\Layers\Domain\ValueObject\IdVO'
            create: false
            x-fields:
              id:
                type: id
          RoleVO:
            type: 'Domain\ValueObject\RoleVO'
            create: true
            x-fields:
              name:
                type: string
                name: name
                required: true
              label:
                type: string
                name: label
                required: true
              enabled:
                type: boolean
                name: enabled
                defaultValue: true
#                required: false
              comment:
                type: textarea
                name: comment
                required: false
              heritage:
                type: array
                name: heritage
                required: true
                multiple: true
                expanded: false
              routeLogin:
                type: string
                name: routeLogin
                required: false
                multiple: false
                expanded: false
              routeLogout:
                type: string
                name: routeLogout
                required: false
                multiple: false
                expanded: false
