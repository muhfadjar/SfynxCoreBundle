default:
    namespace: PromotionContext
    cqrs: Activity\Command
    template: default
    indentation: 4
    widgets:
        presentation:
            widget_coordination:
                class: FormCoordination
                arguments:
                    - '$workflowHandler'
                extends: Sfynx\CoreBundle\Layers\Presentation\Coordination\Generalisation\AbstractFormController
                options:
                    implements: ~
                    uses:
                      - 'Symfony\Component\HttpFoundation\Response'
                      - 'Exception'
                      - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\Entity\ViolationEntityException'
                      - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\Entity\NotFoundEntityException'
                      - 'ProfilContext\Domain\Service\Entity\Profil\ProfilManager'
                    traits:
                      - 'Sfynx\CoreBundle\Layers\Presentation\Coordination\Generalisation\Traits\TraitParam'
                body:
                    - codeComment1:
                        design: 'code'
                        content:
                          - 'try {'
                          - "   // 1. Transform options to Command."
                    - updateCommand:
                        design: 'adapter'
                        class: Sfynx\CoreBundle\Layers\Presentation\Adapter\Command\CommandAdapter
                        arguments:
                            - 'new GoPromiseRequestFormCommand'
                        calls:
                            - [ createCommandFromRequest, [ 'new GoPromiseRequestFormRequest', 'false' ] ]
                    - codeComment2:
                        design: 'code'
                        content: "// 2. Implement the command workflow"
                    - commandWorkflow:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Command\Workflow\CommandWorkflow
                        calls:
                            - [ attach, [ 'new OBGoPromiseRequestCreate' ] ]
                    - codeComment3:
                        design: 'code'
                        content: "// 3. Implement decorator to apply the command workflow from the command"
                    - commandHandlerResult:
                        design: 'decorator'
                        class: Sfynx\CoreBundle\Layers\Application\Command\Handler\CommandHandler
                        arguments:
                            - '$commandWorkflow'
                            - 'Sfynx\CoreBundle\Layers\Domain\Service\Manager\Generalisation\Interfaces\ManagerInterface'
                        handlers: [ 'GoPromiseRequestFormCommandValidationHandler', 'GoPromiseRequestFormCommandSpecHandler']
                        calls:
                            - [ process, [ '$updateCommand' ] ]
                    - codeln1:
                        design: 'code'
                        content:
                          - "// 4. Implement the Response workflow"
                          - "$this->setParam('templating', '@Business/Action/actionFormDemandeGoPromesse.html.twig');"
                    - workflowHandler:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Common\Handler\WorkflowHandler
                        calls:
                            - [ attach, [ 'new OBGoPromiseRequestFormData' ] ]
                            - [ attach, [ 'new OBCreateCommandFormView' ] ]
                            - [ attach, [ 'new OBInjectFormErrors' ] ]
                            - [ attach, [ 'new OBGoPromiseRequestFormBody' ] ]
                            - [ attach, [ 'new OBCreateResponseHtml' ] ]
                    - responseHandlerResult:
                        design: 'handler'
                        class: Sfynx\CoreBundle\Layers\Application\Response\Handler\ResponseHandler
                        arguments:
                            - '$workflowHandler'
                        calls:
                            - [ process, [ '$commandHandlerResult' ] ]
                    - codeln2:
                        design: 'code'
                        content:
                          - "    $response = $responseHandlerResult->getResponse();"
                          - ""
                          - "    $this->logger->info('Request has been sent from this Command', ['command' => $updateCommand]);"
                          - '}  catch (NotFoundEntityException $e) {'
                          - "    $this->logger->error('Request has failed with NotFoundEntityException exception', ['command' => $updateCommand]);"
                          - '    $response = new Response();'
                          - '    $response->setStatusCode(Response::HTTP_NOT_FOUND);'
                          - '    $response->setContent($e->getMessage());'
                          - '}  catch (ViolationEntityException $e) {'
                          - "    $this->logger->error('Request has failed with ViolationEntityException exception', ['command' => $updateCommand]);"
                          - '    $response = new Response();'
                          - '    $response->setStatusCode(Response::HTTP_CONFLICT);'
                          - '    $response->setContent($e->getMessage());'
                          - '}  catch (Exception $e) {'
                          - "    $this->logger->error('Request has failed with HTTP_SERVICE_UNAVAILABLE exception', ['command' => $updateCommand]);"
                          - '    $response = new Response();'
                          - '    $response->setStatusCode(Response::HTTP_SERVICE_UNAVAILABLE);'
                          - '    $response->setContent($e->getMessage());'
                          - '}'
                          - ''
                          - 'return $response;'
            widget_request:
                class: GoPromiseRequestFormRequest
                arguments:
                  - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
        application:
            widget_cqrs_command:
                - GoPromiseRequestFormCommand:
                    create: true
                    class: GoPromiseRequestFormCommand
                    options:
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Application\Common\Generalisation\Traits\TraitCreateInstanceFromNative'
#                        models:
#                          0:
#                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\CommandQueryObject'
#                            parameters:
#                              performMethods:
#                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
#                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
#                              # createFromNativeType = ['general_arg', 'specific_arg']
#                              createFromNativeType: 'general_arg'
            widget_cqrs_command_validator_specification:
                class: Validation\SpecHandler\GoPromiseRequestFormCommandSpecHandler
                arguments:
                  - '$commandHandlerResult'
            widget_cqrs_command_validator_validation:
                class: Validation\ValidationHandler\GoPromiseRequestFormCommandValidationHandler
                arguments:
                  - '$commandHandlerResult'
                  - 'new SymfonyValidatorStrategy'
                  - 'false'
            widget_service_app_class:
                - SymfonyValidatorStrategy:
                    create: false
                    class: 'Sfynx\CoreBundle\Layers\Application\Validation\Validator\SymfonyValidatorStrategy'
                    arguments: ['Symfony\Component\Validator\Validator\ValidatorInterface']
            widget_validation_type:
                class: Action\GoPromiseRequestType
        domain:
            #
            # MANAGER CLASSES
            #
            widget_service_manager_class:
                - ActivityEntityManager:
                    create: true
                    class: Entity\Activity\Manager\ActivityManager
                    options:
                        entity: 'Activity'
            #
            # SERVICES CLASSES
            #
            widget_service_class:
                #
                # ACTIVITY REPOSITORY INTERFACES
                #
                - ActivityCommandRepositoryInterface:
                    create: true
                    class: Domain\Repository\Command\ActivityCommandRepositoryInterface
                    type: interface
                - ActivityQueryRepositoryInterface:
                    create: true
                    class: Domain\Repository\Query\ActivityQueryRepositoryInterface
                    type: interface
            #
            # OBSERVER CLASSES
            #
            widget_workflow_observer_class:
                #
                # LOGICAL RESPONSE HANDLER
                #
                - OBGoPromiseRequestCreate:
                    create: true
                    class: OBGoPromiseRequestCreate
                    arguments:
                      - 'Psr\Log\LoggerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Bundle\FrameworkBundle\Routing\Router'
                      - 'PromotionContext\Domain\Service\Entity\Activity\Manager\ActivityManager'
                      - 'PromotionContext\Domain\Service\Entity\Period\Manager\EntityManager'
                      - 'DocContext\Domain\Service\Entity\Media\MediaManager'
                    construct:
                        create: true
                        body:
                          - 'parent::__construct($request);'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Command\AbstractCreateHandler
                    options:
                        traits: [Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Command\TraitProcess]
                - OBGoPromiseRequestFormData:
                    create: true
                    class: Domain\Workflow\Observer\Activity\Response\OBGoPromiseRequestFormData
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'UserContext\Domain\Service\Entity\User\UserManager'
                      - 'DocContext\Domain\Service\Entity\Media\MediaManager'
                      - 'DocContext\Domain\Service\Entity\DocTopicWorkflow\DocTopicWorkflowManager'
                    construct:
                        create: true
                        body:
                          - 'parent::__construct($request);'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\AbstractCreateFormData
                    options:
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\FormData', parameters: []}
                - OBGoPromiseRequestFormBody:
                    create: true
                    class: Domain\Workflow\Observer\Activity\Response\OBGoPromiseRequestFormBody
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Bundle\FrameworkBundle\Templating\EngineInterface'
                      - '$this->param'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\AbstractCreateFormBody
                    options:
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - "$this->wfLastData->body = '';"
                              - 'try {'
                              - "    $this->wfLastData->body = $this->templating->render("
                              - "        $this->param->templating,"
                              - '        ['
                              - "           'entity' => $this->wfHandler->entity,"
                              - "           'edit_form' => $this->wfLastData->form->createView(),"
                              - "           'errors_form' => $this->wfHandler->errors"
                              - '        ]'
                              - '    );'
                              - '} catch (Exception $e) {'
                              - '    throw WorkflowException::noCreatedViewForm();'
                              - '}'
                              - 'return true;'
                - OBCreateCommandFormView:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBCreateCommandFormView
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Component\Form\FormFactoryInterface'
                      - 'Sfynx\CoreBundle\Layers\Application\Validation\Type\Generalisation\Interfaces\FormTypeInterface'
#                      - 'new GoPromiseRequestType'
                - OBInjectFormErrors:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBInjectFormErrors
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Component\Translation\TranslatorInterface'
                - OBCreateResponseHtml:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBCreateResponseHtml
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
        infrastructure:
            widget_security_parse: true
            widget_infra_class:
                #
                # ACTIVITY REPOSITORIES
                #
                - CommandActivityRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Command\Orm\ActivityRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractCommandRepository
                    options:
                        implements: ['Domain\Repository\Command\ActivityCommandRepositoryInterface']
                - QueryActivityRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\ActivityRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractQueryRepository
                    options:
                        implements: ['Domain\Repository\Query\ActivityQueryRepositoryInterface']
                #
                # BUSINESS TRANSFORMER/QUERY BUILDER
                #
                - FindBusinessQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Business\QueryBuilder\FindBusinessQueryBuilder
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindBusinessQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Business\QueryTransformer\FindBusinessQueryTransformer
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['PromotionContext\Infrastructure\Persistence\Adapter\Query\Orm\Business\QueryBuilder\FindBusinessQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindBusinessQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}
                #
                # ACTIVITY TRANSFORMER/QUERY BUILDER
                #
                - FindActivityQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Activity\QueryBuilder\FindActivityQueryBuilder
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindActivityQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Activity\QueryTransformer\FindActivityQueryTransformer
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['PromotionContext\Infrastructure\Persistence\Adapter\Query\Orm\Activity\QueryBuilder\FindActivityQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindActivityQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}
                #
                # PROFIL TRANSFORMER/QUERY BUILDER
                #
                - FindProfilQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Profil\QueryBuilder\FindProfilQueryBuilder
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindProfilQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Profil\QueryTransformer\FindProfilQueryTransformer
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['PromotionContext\Infrastructure\Persistence\Adapter\Query\Orm\Profil\QueryBuilder\FindProfilQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindProfilQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}
                #
                # USER TRANSFORMER/QUERY BUILDER
                #
                - FindUserQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\User\QueryBuilder\FindUserQueryBuilder
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindUserQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\User\QueryTransformer\FindUserQueryTransformer
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['PromotionContext\Infrastructure\Persistence\Adapter\Query\Orm\User\QueryBuilder\FindUserQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindUserQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}
    mapping:
        x-providers: [orm, couchdb]
        x-entities:
#          Activity:
#            x-fields:
#              documents:
#                type: array
#                required: true
#                multiple: true
#                properties: ['name', 'date']
#                mapping:
#                  relationship: ManyToMany
#                  targetEntity: DocContext\Domain\Entity\Media
#              applicantProfil:
#                type: id
#                foreignKey: true
#                required: true
#                mapping:
#                  relationship: ManyToOne
#                  targetEntity: UserContext\Domain\Entity\User
          Activity:
            x-fields:
              documents:
                name: documents
                type: array
                required: true
                multiple: true
                properties: ['nom']
                mapping:
                  relationship: ManyToMany
                  targetEntity: DocContext\Domain\Entity\Media
              business:
                name: business
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                mapping:
                  relationship: ManyToOne
                  targetEntity: PromotionContext\Domain\Entity\Business
                  formData:
                      manager: 'PromotionContext\Domain\Service\Entity\Business\Manager\BusinessManager'
                      queryFunction:
                          class: 'FindBusinessQueryTransformer'
                          args: ['true', 'false', 1299, {tata: 'tataValue', tutu: 'tutuValue'} ]
              activityGoPromiseId:
                name: activityGoPromise
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                mapping:
                  relationship: ManyToOne
                  targetEntity: PromotionContext\Domain\Entity\Activity
                  formData:
                      manager: 'PromotionContext\Domain\Service\Entity\Activity\Manager\ActivityManager'
                      queryFunction:
                          class: 'FindActivityQueryTransformer'
                          args: ['false', 'true', 1300, {tata: 'tataValue', tutu: 'tutuValue'}]
              profil:
                name: profil
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                mapping:
                  relationship: ManyToOne
                  targetEntity: ProfilContext\Domain\Entity\Profil
                  formData:
                      manager: 'UserContext\Domain\Service\Profil\Manager\ProfilManager'
                      queryFunction: { class: 'FindProfilQueryTransformer', args: ['false', 'false', 1301, {tata: 'tataValue', tutu: 'tutuValue'}] }
              assigmentProfil:
                name: assigmentProfil
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                choice_label: Destinataire
                mapping:
                  relationship: ManyToOne
                  targetEntity: UserContext\Domain\Entity\User
                  formData:
                      manager: 'UserContext\Domain\Service\User\Manager\UserManager'
                      queryFunction: { class: 'FindUserQueryTransformer', args: ['true', 'true', 1302, {tata: 'tataValue', tutu: 'tutuValue'}] }
              applicantProfil:
                name: applicantProfil
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                mapping:
                  relationship: ManyToOne
                  targetEntity: UserContext\Domain\Entity\User
                  formData:
                      manager: 'UserContext\Domain\Service\User\Manager\UserManager'
                      queryFunction: { class: 'FindUserQueryTransformer', args: ['true', 'false', 1303, {tata: 'tataValue', tutu: 'tutuValue'}] }
              businessTypeName:
                name: businessTypeName
                type: string
                required: true
              objectifPeriod:
                name: objectifPeriod
                type: datetime
                required: true
                label: Objectif de date
              comment:
                name: comment
                type: textarea
                required: false
        x-valueObjects:
          IdVO:
            type: Sfynx\CoreBundle\Layers\Domain\ValueObject\IdVO
            x-fields:
              id:
                type: id