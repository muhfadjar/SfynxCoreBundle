default:
    namespace: MyContext
    cqrs: Movie\Command
    template: default
    indentation: 4
    widgets:
        presentation:
            widget_coordination:
                class: FormCoordination
                arguments:
                    - '$workflowHandler'
                extends: ~
                options:
                    implements: ~
                    uses:
                      - 'Symfony\Component\HttpFoundation\Response'
                      - 'Exception'
                      - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\Entity\ViolationEntityException'
                      - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\Entity\NotFoundEntityException'
                    traits: ['Sfynx\CoreBundle\Layers\Presentation\Coordination\Generalisation\Traits\TraitParam']
                body:
                    - codeComment1:
                        design: 'code'
                        content:
                          - 'try {'
                          - "    // 1. Transform options to Command."
                    - updateCommand:
                        design: 'adapter'
                        class: Sfynx\CoreBundle\Layers\Presentation\Adapter\Command\CommandAdapter
                        arguments:
                            - 'new MovieFormCommand'
                        calls:
                            - [ createCommandFromRequest, [ 'new MovieFormRequest', 'false' ] ]
                    - codeComment2:
                        design: 'code'
                        content: "// 2. Implement the command workflow"
                    - commandWorkflow:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Command\Workflow\CommandWorkflow
                        calls:
                            - [ attach, [ 'new OBMovieEntityEdit' ] ]
                            - [ attach, [ 'new OBMovieEntityCreate' ] ]
                    - codeComment3:
                        design: 'code'
                        content: "// 3. Implement decorator to apply the command workflow from the command"
                    - commandHandlerResult:
                        design: 'decorator'
                        class: Sfynx\CoreBundle\Layers\Application\Command\Handler\CommandHandler
                        arguments:
                            - '$commandWorkflow'
#                            - '[$this->movieManager, $this->genreManager, $this->priceManager]'
                            - '[MyContext\Domain\Service\Entity\Movie\Manager\MovieManager, MyContext\Domain\Service\Entity\Genre\Manager\GenreManager, MyContext\Domain\Service\Entity\Price\Manager\PriceManager]'
                        handlers: [ 'MovieFormCommandValidationHandler', 'MovieFormCommandSpecHandler']
                        calls:
                            - [ process, [ '$updateCommand' ] ]
                    - codeln1:
                        design: 'code'
                        content:
                          - "// 4. Implement the Response workflow"
                          - "$this->setParam('templating', '@Business/Movie/edit.html.twig');"
                    - workflowHandler:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Common\Handler\WorkflowHandler
                        calls:
                            - [ attach, [ 'new OBMovieCreateFormData' ] ]
                            - [ attach, [ 'new OBCreateCommandFormView' ] ]
                            - [ attach, [ 'new OBInjectFormErrors' ] ]
                            - [ attach, [ 'new OBMovieCreateFormBody' ] ]
                            - [ attach, [ 'new OBCreateResponseHtml' ] ]
                    - responseHandlerResult:
                        design: 'handler'
                        class: Sfynx\CoreBundle\Layers\Application\Response\Handler\ResponseHandler
                        arguments:
                            - '$workflowHandler'
                        calls:
                            - [ process, [ '$commandHandlerResult' ] ]
                    - codeln2:
                        design: 'code'
                        content:
                          - "    $response = $responseHandlerResult->getResponse();"
                          - ""
                          - "    // $this->logger->info('Request has been sent from this Command', ['command' => $updateCommand]);"
                          - '}  catch (NotFoundEntityException $e) {'
                          - "    $this->logger->error('Request has failed with NotFoundEntityException exception', ['command' => $updateCommand]);"
                          - '    $response = new Response();'
                          - '    $response->setStatusCode(Response::HTTP_NOT_FOUND);'
                          - '    $response->setContent($e->getMessage());'
                          - '}  catch (ViolationEntityException $e) {'
                          - "    $this->logger->error('Request has failed with ViolationEntityException exception', ['command' => $updateCommand]);"
                          - '    $response = new Response();'
                          - '    $response->setStatusCode(Response::HTTP_CONFLICT);'
                          - '    $response->setContent($e->getMessage());'
                          - '}  catch (Exception $e) {'
                          - "    $this->logger->error('Request has failed with HTTP_SERVICE_UNAVAILABLE exception', ['command' => $updateCommand]);"
                          - '    $response = new Response();'
                          - '    $response->setStatusCode(Response::HTTP_SERVICE_UNAVAILABLE);'
                          - '    $response->setContent($e->getMessage());'
                          - '}'
                          - ''
                          - 'return $response;'
            widget_request:
                class: MovieFormRequest
                arguments:
                  - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
        application:
            widget_cqrs_command:
                - MovieFormCommand:
                    create: true
                    class: MovieFormCommand
                    options:
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Application\Common\Generalisation\Traits\TraitCreateInstanceFromNative'
#                        models:
#                          0:
#                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\CommandQueryObject'
#                            parameters:
#                              performMethods:
#                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
#                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
#                              # createFromNativeType = ['general_arg', 'specific_arg']
#                              createFromNativeType: 'general_arg'
            widget_cqrs_command_validator_specification:
                class: Validation\SpecHandler\MovieFormCommandSpecHandler
                arguments:
                  - '$commandHandlerResult'
            widget_cqrs_command_validator_validation:
                class: Validation\ValidationHandler\MovieFormCommandValidationHandler
                arguments:
                  - '$commandHandlerResult'
                  - 'new SymfonyValidatorStrategy'
                  - 'false'
            widget_service_app_class:
                - SymfonyValidatorStrategy:
                    create: false
                    class: 'Sfynx\CoreBundle\Layers\Application\Validation\Validator\SymfonyValidatorStrategy'
                    arguments: ['Symfony\Component\Validator\Validator\ValidatorInterface']
            widget_validation_type:
                class: MovieType
                arguments: ~
        domain:
            #
            # MOVIE ENTITY CLASSES
            #
            widget_entity_class:
                - TitleVO:
                    create: true
                    class: Domain\ValueObject\TitleVO
                    extends: 'Sfynx\CoreBundle\Layers\Domain\ValueObject\Generalisation\AbstractVO'
                    options:
                        models:
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\ValueObject'
                            parameters:
                              mapping: 'TitleVO'
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                - MovieVO:
                    create: true
                    class: Domain\ValueObject\MovieVO
                    extends: 'Sfynx\CoreBundle\Layers\Domain\ValueObject\Generalisation\AbstractVO'
                    options:
                        models:
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\ValueObject'
                            parameters:
                              mapping: 'MovieVO'
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                - MovieEntity:
                    create: true
                    class: Domain\Entity\Movie
#                    arguments: ['Sfynx\AuthBundle\Domain\ValueObject\MovieVO']
                    options:
                        mapping: 'Movie'
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitBuild'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitEnabled'
                        models:
#                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity', parameters: { performMethod: ['Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct']} }
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity'
                            parameters:
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToString'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Serialize'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Unserialize'
            #
            # PRICE ENTITY CLASSES
            #
                - PriceVO:
                    create: true
                    class: Domain\ValueObject\PriceVO
                    extends: 'Sfynx\CoreBundle\Layers\Domain\ValueObject\Generalisation\AbstractVO'
                    options:
                        models:
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\ValueObject'
                            parameters:
                              mapping: 'PriceVO'
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                - PriceEntity:
                    create: true
                    class: Domain\Entity\Price
#                    arguments: ['Sfynx\AuthBundle\Domain\ValueObject\PriceVO']
                    options:
                        mapping: 'Price'
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitBuild'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitEnabled'
                        models:
#                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity', parameters: { performMethod: ['Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct']} }
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity'
                            parameters:
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToString'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Serialize'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Unserialize'
            #
            # GENRE ENTITY CLASSES
            #
                - GenreEntity:
                    create: true
                    class: Domain\Entity\Genre
#                    arguments: ['Sfynx\AuthBundle\Domain\ValueObject\GenreVO']
                    options:
                        mapping: 'Genre'
                        entityType: 'valueObjectAggregator' #  ['default', 'valueObjectAggregator']
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitBuild'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitEnabled'
                        models:
#                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity', parameters: { performMethod: ['Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct']} }
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity'
                            parameters:
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToString'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Serialize'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Unserialize'
            #
            # MANAGER CLASSES
            #
            widget_service_manager_class:
                - MovieEntityManager:
                    create: true
                    class: Entity\Movie\Manager\MovieManager
                    arguments: ~
                    options:
                        mapping: 'Movie'
                - PriceEntityManager:
                    create: true
                    class: Entity\Price\Manager\PriceManager
                    arguments: ~
                    options:
                        mapping: 'Price'
                - GenreEntityManager:
                    create: true
                    class: Entity\Genre\Manager\GenreManager
                    arguments: ~
                    options:
                        mapping: 'Genre'
            #
            # SERVICES CLASSES
            #
            widget_service_class:
#                - EntityManager:
#                    create: true
#                    class: Domain\Service\Entity\Movie\Manager\EntityManager
#                    arguments: ~
#                    comments: ['Layout manager working with entities (Orm, Odm, Couchdb)']
#                    extends: Sfynx\CoreBundle\Layers\Domain\Service\Manager\Generalisation\AbstractManager
#                    options:
#                        implements: ~
#                        uses: ~
#                        traits: ~
#                        methods:
#                          - name: 'newFromCommand'
#                            comments: ['{@inheritdoc}']
#                            arguments: ['Sfynx\CoreBundle\Layers\Application\Command\Generalisation\Interfaces\CommandInterface']
#                            visibility: 'public'
#                            returnType: 'object'
#                            returnParent: true
#                          - name: 'buildFromCommand'
#                            comments: ['{@inheritdoc}']
#                            arguments: ['object $entity', 'Sfynx\CoreBundle\Layers\Application\Command\Generalisation\Interfaces\CommandInterface', 'bool $updateCommand = false']
#                            visibility: 'public'
#                            returnType: 'object'
#                            returnParent: true
#                          - name: 'buildFromEntity'
#                            comments: ['{@inheritdoc}']
#                            arguments: ['Sfynx\CoreBundle\Layers\Application\Command\Generalisation\Interfaces\CommandInterface', 'object $entity']
#                            visibility: 'public'
#                            returnType: 'Sfynx\CoreBundle\Layers\Application\Command\Generalisation\Interfaces\CommandInterface'
#                            returnParent: true
                #
                # REPOSITORY INTERFACES
                #
                - MovieCommandRepositoryInterface:
                    create: true
                    class: Domain\Repository\Command\MovieCommandRepositoryInterface
                    type: interface
                - MovieQueryRepositoryInterface:
                    create: true
                    class: Domain\Repository\Query\MovieQueryRepositoryInterface
                    type: interface
                - GenreCommandRepositoryInterface:
                    create: true
                    class: Domain\Repository\Command\GenreCommandRepositoryInterface
                    type: interface
                - GenreQueryRepositoryInterface:
                    create: true
                    class: Domain\Repository\Query\GenreQueryRepositoryInterface
                    type: interface
                - PriceCommandRepositoryInterface:
                    create: true
                    class: Domain\Repository\Command\PriceCommandRepositoryInterface
                    type: interface
                - PriceQueryRepositoryInterface:
                    create: true
                    class: Domain\Repository\Query\PriceQueryRepositoryInterface
                    type: interface
            #
            # OBSERVER CLASSES
            #
            widget_workflow_observer_class:
                - OBMovieEntityCreate:
                    create: true
                    class: OBMovieEntityCreate
                    arguments:
                      - 'Psr\Log\LoggerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Manager\Generalisation\Interfaces\ManagerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Bundle\FrameworkBundle\Routing\Router'
                      - 'bool $updateCommand = false'
                    construct:
                        create: true
                        body:
                          - 'parent::__construct($manager, $request, $updateCommand);'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Command\AbstractEntityCreateHandler
                    options:
                        implements: ~
                        uses: ~
                        traits: [Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Command\TraitProcess]
                - OBMovieEntityEdit:
                    create: true
                    class: OBMovieEntityEdit
                    arguments:
                      - 'Psr\Log\LoggerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Manager\Generalisation\Interfaces\ManagerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Bundle\FrameworkBundle\Routing\Router'
                      - 'bool $updateCommand = false'
                    construct:
                        create: true
                        body:
                          - 'parent::__construct($manager, $request, $updateCommand);'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Command\AbstractEntityEditHandler
                    options:
                        implements: ~
                        uses: ~
                        traits: [Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Command\TraitProcess]
                - OBMovieCreateFormData:
                    create: true
                    class: Domain\Workflow\Observer\Movie\Response\OBMovieCreateFormData
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'MyContext\Domain\Service\Entity\Genre\Manager\GenreManager'
                      - 'MyContext\Domain\Service\Entity\Movie\Manager\MovieManager'
                      - 'MyContext\Domain\Service\Entity\Price\Manager\PriceManager'
                      - 'Sfynx\MediaBundle\Layers\Domain\Service\Mediatheque\Manager\EntityManager as MediathequeManager'
                    construct:
                        create: true
                        body:
                          - 'parent::__construct($request);'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\AbstractCreateFormData
                    options:
                        implements: ~
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        traits: ~
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\FormData', parameters: []}
                - OBMovieCreateFormBody:
                    create: true
                    class: Domain\Workflow\Observer\Movie\Response\OBMovieCreateFormBody
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Bundle\FrameworkBundle\Templating\EngineInterface'
                      - '$this->param'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\AbstractCreateFormBody
                    options:
                        implements: ~
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        traits: ~
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - "$this->wfLastData->body = '';"
                              - 'try {'
                              - "    $this->wfLastData->body = $this->templating->render("
                              - "        $this->param->templating,"
                              - '        ['
                              - "           'entity' => $this->wfHandler->entity,"
                              - "           'edit_form' => $this->wfLastData->form->createView(),"
                              - "           'errors_form' => $this->wfHandler->errors"
                              - '        ]'
                              - '    );'
                              - '} catch (Exception $e) {'
                              - '    throw WorkflowException::noCreatedViewForm();'
                              - '}'
                              - 'return true;'
                - OBCreateCommandFormView:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBCreateCommandFormView
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Component\Form\FormFactoryInterface'
#                      - 'Sfynx\CoreBundle\Layers\Application\Validation\Type\Generalisation\Interfaces\FormTypeInterface'
                      - 'new MovieType'
                - OBInjectFormErrors:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBInjectFormErrors
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                      - 'Symfony\Component\Translation\TranslatorInterface'
                - OBCreateResponseHtml:
                    create: false
                    class: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Response\OBCreateResponseHtml
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
        infrastructure:
            widget_security_parse: true
            widget_infra_class:
                #
                # MOVIES REPOSITORIES
                #
                - CommandMovieRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Command\Orm\MovieRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractCommandRepository
                    options:
                        implements: ['Domain\Repository\Command\MovieCommandRepositoryInterface']
                - QueryMovieRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\MovieRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractQueryRepository
                    options:
                        implements: ['Domain\Repository\Query\MovieQueryRepositoryInterface']
                #
                # PRICES REPOSITORIES
                #
                - CommandPriceRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Command\Orm\PriceRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractCommandRepository
                    options:
                        implements: ['Domain\Repository\Command\PriceCommandRepositoryInterface']
                - QueryPriceRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\PriceRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractQueryRepository
                    options:
                        implements: ['Domain\Repository\Query\PriceQueryRepositoryInterface']
                #
                # GENRE REPOSITORIES
                #
                - CommandGenreRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Command\Orm\GenreRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractCommandRepository
                    options:
                        implements: ['Domain\Repository\Command\GenreCommandRepositoryInterface']
                - QueryGenreRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\GenreRepository
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractQueryRepository
                    options:
                        implements: ['Domain\Repository\Query\GenreQueryRepositoryInterface']
                #
                # MOVIE TRANSFORMER/QUERY BUILDER
                #
                - FindMovieQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Movie\QueryBuilder\FindMovieQueryBuilder
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindMovieQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Movie\QueryTransformer\FindMovieQueryTransformer
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['MyContext\Infrastructure\Persistence\Adapter\Query\Orm\Movie\QueryBuilder\FindMovieQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindMovieQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}
                #
                # GENRE TRANSFORMER/QUERY BUILDER
                #
                - FindGenreQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Genre\QueryBuilder\FindGenreQueryBuilder
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindGenreQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Genre\QueryTransformer\FindGenreQueryTransformer
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['MyContext\Infrastructure\Persistence\Adapter\Query\Orm\Genre\QueryBuilder\FindGenreQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindMovieQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}
                #
                # DOCUMENT TRANSFORMER/QUERY BUILDER
                #
                - FindDocumentQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Document\QueryBuilder\FindDocumentQueryBuilder
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindDocumentQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Document\QueryTransformer\FindDocumentQueryTransformer
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['MyContext\Infrastructure\Persistence\Adapter\Query\Orm\Document\QueryBuilder\FindDocumentQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindMovieQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}

    mapping:
        x-providers: [orm, couchdb]
        x-entities:
#          Movie:
#            x-fields:
#              id:
#                name: entityId
#                type: id
#                primaryKey: true
#              documents:
#                type: array
#                required: true
#                multiple: true
#                properties: ['name', 'date']
#                mapping:
#                  relationship: ManyToMany
#                  targetEntity: Sfynx\MediaBundle\Layers\Domain\Entity\Mediatheque
#              comments:
#                type: array
#                required: true
#                multiple: true
#              title:
#                type: string
#                required: true
#              releaseDate:
#                type: datetime
#                required: false
#              synopsis:
#                type: string
#                required: false
#              reference:
#                type: string
#                required: true
#              genre:
#                type: id
#                foreignKey: true
#                required: true
#                mapping:
#                  relationship: ManyToOne
#                  targetEntity: Genre
#          Price:
#            x-fields:
#              id:
#                type: id
#                primaryKey: true
#              title:
#                type: string
#                required: true
#              date:
#                type: datetime
#                required: false
#              reference:
#                type: string
#                required: true
#              movie:
#                type: id
#                foreignKey: true
#                required: true
#                mapping:
#                  relationship: ManyToOne
#                  targetEntity: Movie
#          Genre:
#            x-fields:
#              id:
#                type: id
#                primaryKey: true
#              label:
#                type: string
#                required: false
          Movie:
            x-fields:
              id:
                name: entityId
                type: valueObject
                voName: IdVO
                primaryKey: true
#                mapping:
#                  targetEntity: 'MyContext\Domain\Entity\Movie'
#                  formData:
#                      manager: 'MyContext\Domain\Service\Entity\Movie\Manager\MovieManager'
              documents:
                type: array
                required: true
                multiple: true
                properties: ['name', 'date']
                mapping:
                  relationship: ManyToMany
                  targetEntity: 'Sfynx\MediaBundle\Layers\Domain\Entity\Mediatheque'
                  formData:
                      manager: 'Sfynx\MediaBundle\Layers\Domain\Service\Mediatheque\Manager\EntityManager as MediathequeManager'
                      queryFunction: { class: 'FindDocumentQueryTransformer', args: ['true', 'false', 1299, {tata: 'tataValue', tutu: 'tutuValue'}] }
              genre:
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                mapping:
                  setter: true
                  relationship: ManyToOne
                  targetEntity: 'MyContext\Domain\Entity\Genre'
                  formData:
                      manager: 'MyContext\Domain\Service\Entity\Genre\Manager\GenreManager'
                      queryFunction: { class: 'FindGenreQueryTransformer', args: ['true', 'false', 1299, {tata: 'tataValue', tutu: 'tutuValue'}] }
              movie:
                type: valueObject
                voName: MovieVO
          Price:
            x-fields:
              id:
                name: PriceEntityId
                type: valueObject
                voName: IdVO
                primaryKey: true
#                mapping:
#                  targetEntity: 'MyContext\Domain\Entity\Price'
#                  formData:
#                      manager: 'MyContext\Domain\Service\Entity\Price\Manager\PriceManager'
              movie:
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                mapping:
                  setter: true
                  relationship: ManyToOne
                  targetEntity: 'MyContext\Domain\Entity\Movie'
                  formData:
                      manager: 'MyContext\Domain\Service\Entity\Movie\Manager\MovieManager'
                      queryFunction: { class: 'FindMovieQueryTransformer', args: ['true', 'false', 1299, {tata: 'tataValue', tutu: 'tutuValue'}] }
              price:
                type: valueObject
                voName: PriceVO
          Genre:
            x-fields:
              id:
                name: GenreEntityId
                type: valueObject
                voName: IdVO
                primaryKey: true
#                mapping:
#                  targetEntity: 'MyContext\Domain\Entity\Genre'
#                  formData:
#                      manager: 'MyContext\Domain\Service\Entity\Genre\Manager\GenreManager'
              genre:
                type: valueObject
                voName: GenreVO
        x-valueObjects:
          IdVO:
            type: Sfynx\CoreBundle\Layers\Domain\ValueObject\IdVO
            x-fields:
              id:
                type: id
          GenreVO:
            type: \Domain\ValueObject\GenreVO
            x-fields:
              label:
                type: string
                required: true
          MovieVO:
            type: \Domain\ValueObject\MovieVO
            x-fields:
              comments:
                type: array
                required: true
                multiple: true
              title:
                type: valueObject
                voName: TitleVO
                required: true
              releaseDate:
                type: datetime
                required: false
              synopsis:
                type: string
                required: false
              reference:
                type: string
                required: true
          PriceVO:
            type: \Domain\ValueObject\PriceVO
            x-fields:
              title:
                type: valueObject
                voName: TitleVO
                required: true
              date:
                type: datetime
                required: false
              reference:
                type: string
                required: true
          TitleVO:
            type: \Domain\ValueObject\TitleVO
            x-fields:
              title:
                type: string
