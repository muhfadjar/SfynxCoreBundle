<?php
namespace Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;

use Sfynx\CoreBundle\Layers\Infrastructure\Cache\CacheQuery;
use Sfynx\CoreBundle\Layers\Domain\Repository\Query\QueryRepositoryInterface;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Interfaces\ResultInterface;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\Result;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\Traits\TraitTranslation;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\Traits\TraitProvider;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Traits\TraitResultFunction;

/**
 * Abstract Query Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @category   Sfynx\CoreBundle\Layers
 * @package    Infrastructure
 * @subpackage Persistence\Adapter\Generalisation\Orm
 * @abstract
 * @author     Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @copyright  2015 PI-GROUPE
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    2.3
 * @link       http://opensource.org/licenses/gpl-license.php
 * @since      2015-02-17
 */
abstract class AbstractQueryRepository extends EntityRepository implements QueryRepositoryInterface
{
    use TraitResultFunction;
    use TraitProvider;
    use TraitTranslation;

    /**
     * {@inheritdoc}
     */
    public function Result(?Query $query): ResultInterface
    {
        return new Result($query);
    }

    /**
     * {@inheritdoc}
     */
    public function getCacheFactory(): CacheQuery
    {
        return new CacheQuery($this->_em);
    }

    /**
     * {@inheritdoc}
     */
    public function getEm(): EntityManagerInterface
    {
        return $this->_em;
    }

    /**
     * {@inheritdoc}
     */
    public function getEntityName(): string
    {
        return $this->_entityName;
    }

    /**
     * {@inheritdoc}
     */
    public function getTableName(): string
    {
        return $this->getClassMetadata()->getTableName();
    }

    /**
     * @inheritdoc}
     */
    public function getReference($id)
    {
        return $this->_em->getReference($this->_entityName, $id);
    }

    /**
     * @inheritdoc}
     */
    public function execute(QueryBuilder $query)
    {
        return $query->getQuery()->execute();
    }

    /**
     * @inheritdoc}
     */
    public function clauseAndWhere(QueryBuilder $query, $dbRef, $refValue): QueryBuilder
    {
        $refValueName = $this->struuid('clause');
        return $query
            ->andWhere($dbRef. ' = :'.$refValueName)
            ->setParameter($refValueName, $refValue);
    }

    /**
     * @inheritdoc}
     */
    public static function struuid(string $entropy)
    {
        $s = \uniqid("", $entropy);
        $num = \hexdec(\str_replace(".","", (string)$s));
        $index = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $base = \strlen($index);
        $out = '';

        for ($t = \floor(\log10($num) / \log10($base)); $t >= 0; $t--) {
            $a = \floor($num / \pow($base, $t));
            $out = $out . \substr($index, $a, 1);
            $num = $num - ($a * \pow($base, $t));
        }

        return $out;
    }

    /**
     * Find by query builder
     *
     * @param array $criteria
     * @param array|null $orderBy
     *
     * @return QueryBuilder
     */
    public function findByQueryBuilder(array $criteria, array $orderBy = null): QueryBuilder
    {
        $qb = $this->createQueryBuilder('entity');
        if(!is_null($orderBy)) {
            foreach($orderBy as $field => $order) {
                $qb->addOrderBy(sprintf("entity.%s", $field), $order);
            }
        }
        self::addCriteria($qb, 'entity', $criteria);

        return $qb;
    }

    /**
     * addCriteria
     *
     * @param QueryBuilder $qb
     * @param string $sourceEntity
     * @param array $criteria
     */
    public static function addCriteria(QueryBuilder & $qb, $sourceEntity, array $criteria)
    {
        foreach ($criteria as $field => $value) {
            if (\is_array($value)) {
                self::addJoin($qb, $sourceEntity, $field);
                self::addCriteria($qb, $field, $value);
            } else {
                self::addWhere($qb, $sourceEntity, $field, $value);
            }
        }
    }

    /**
     * addJoin
     *
     * @param QueryBuilder $qb
     * @param string $relatedEntity
     * @param string $sourceEntity
     * @param array $relatedEntityCriteria
     */
    public static function addJoin(QueryBuilder & $qb, $sourceEntity, $relatedEntity, array $relatedEntityCriteria = [])
    {
        $qb->join(sprintf('%s.%s', $sourceEntity, $relatedEntity), $relatedEntity);

        foreach ($relatedEntityCriteria as $field => $value) {
            self::addWhere($qb, $relatedEntity, $field, $value);
        }
    }

    /**
     * addWhere
     *
     * @param QueryBuilder $qb
     * @param string $relatedEntity
     * @param string $field
     * @param string $value
     */
    public static function addWhere(QueryBuilder & $qb, $relatedEntity, $field, $value)
    {
        $qb->where($qb->expr()->eq(
            sprintf('%s.%s', $relatedEntity, $field),
            $value
        ));
    }
}